// vim: filetype=javascript
{
    "workbench.colorTheme": "Gentle Mary",
    "window.zoomLevel": 0,
    "editor.fontFamily": "Lucida Console, Lucida Sans Typewriter, Menlo, Monaco, 'Courier New', monospace",
    // Looks a lot like WebStorm
    "editor.fontSize": 11,
    "editor.lineHeight": 14,
    // Slightly larger (I prefer)
    // "editor.fontSize": 11.3,
    // "editor.lineHeight": 14,
    "files.autoSave": "onWindowChange",
    "files.insertFinalNewline": true,
    "breadcrumbs.enabled": true,
    // Clearer tree structure (default 8)
    "workbench.tree.indent": 18,

    "terminal.integrated.fontSize": 11,
    "terminal.integrated.fontWeightBold": "normal",
    "terminal.integrated.lineHeight": 1.1,

    // Oh no this can be terrible.  It may reformat the entire file after a tiny paste, and it sometimes does it wrong!  (Even when prettier is enabled!)
    //"editor.formatOnPaste": true,
    // This was running on some files I wasn't editing.
    //"editor.formatOnSave": true,

    // Open searches below the editor, not in the sidebar
    "search.location": "panel",

    // Let snippets take priority over other things in the suggestions list
    // See: https://github.com/Microsoft/vscode/issues/10565#issuecomment-317319434
    // Specifically I needed this for TypeScript, where a deprecated alias and two imports were suggested before my 'log' snippet
    // But this sucks when I want to see the props on a component I am trying to use.
    //"editor.snippetSuggestions": "top",

    //"workbench.editor.enablePreview": false,
    //"workbench.editor.enablePreviewFromQuickOpen": false,

    // Make unused variables strongly greyed out
    "workbench.colorCustomizations": {
        "editorUnnecessaryCode.opacity": "#00000080",
    },

    // Use TypeScript to check JSDocs in Javascript files
    //"javascript.implicitProjectConfig.checkJs": true,
    // For more on that: https://devblogs.microsoft.com/typescript/how-to-upgrade-to-typescript-without-anybody-noticing-part-1/
    "typescript.updateImportsOnFileMove.enabled": "always",

    // Tell the eslint plugin to also check TypeScript files
    "eslint.validate": [
        "javascript",
        "javascriptreact",
        "typescript",
        "typescriptreact"
    ],

    "[javascript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescriptreact]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[html]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },



    // === Settings for plugins === //

    "gitlens.codeLens.enabled": false,
    "gitlens.currentLine.enabled": false,
    //"gitlens.blame.compact": false,

    "trailing-spaces.deleteModifiedLinesOnly": true,
    "trailing-spaces.highlightCurrentLine": false,

    "todo-tree.highlights.defaultHighlight": {
        "icon": "alert",
        "type": "text",
        "foreground": "orange",
        // "background": "white",
        "opacity": 50,
        "iconColour": "blue"
    },
    "todo-tree.general.tags": [
        "TODO",
        "@todo",
        "FIXME",
        "@fixme",
        "BUG",
        "@bug",
        "CONSIDER",
        "@consider"
    ],
    /*
    "todo-tree.customHighlight": {
        "TODO": {
            "icon": "check",
            "type": "line"
        },
        "FIXME": {
            "foreground": "black",
            "iconColour": "yellow"
        }
    }
    */

    // For VSCodeVim
    // Docs: https://github.com/VSCodeVim/Vim
    //"vim.easymotion": true,
    //"vim.sneak": true, // Didn't make any difference to <kbd>f</kbd> when I tried it.  Oh is it supposed to be two char?
    //"vim.incsearch": true,
    //"vim.useSystemClipboard": true,
    //"vim.useCtrlKeys": true,
    "vim.hlsearch": true,
    "vim.ignorecase": false,
    "vim.smartcase": false,
    "vim.highlightedyank.enable": true,
    "vim.normalModeKeyBindingsNonRecursive": [
        { "before": [ "C-L" ], "commands": [ ":nohlsearch" ], "after": [ "S-Esc" ] },
        // I found my fingers reaching for this when I first started using Vim mode.  Not sure if they do now so much.
        // But it's actually more powerful than Cmd-S on macOS, because that only saves the current file.
        { "before": [ "C-S" ], "commands": [ "workbench.action.files.saveAll" ] },
        { "before": [ "[", " " ], "after": [ "O", "<Esc>" ] },
        { "before": [ "]", " " ], "after": [ "o", "<Esc>" ] },
        { "before": [ "[", "b" ], "commands": [ "workbench.action.previousEditor" ] },
        { "before": [ "]", "b" ], "commands": [ "workbench.action.nextEditor" ] },
        { "before": [ "[", "w" ], "commands": [ "workbench.action.focusPreviousGroup" ] },
        { "before": [ "]", "w" ], "commands": [ "workbench.action.focusNextGroup" ] },
        { "before": [ "C-W", "s" ], "commands": [ "workbench.action.splitEditorDown" ] },
        { "before": [ "C-W", "S" ], "commands": [ "workbench.action.splitEditorRight" ] },
        { "before": [ "C-W", "c" ], "commands": [ "workbench.action.closeGroup" ] },
        //{ "before": [ "g", "x" ], "commands": [ "workbench.action.url.openUrl" ] },
        { "before": [ "C-U" ], "commands": [ "workbench.action.openPreviousRecentlyUsedEditor" ] },
        { "before": [ "C-J" ], "commands": [ "scrollLineDown", "scrollLineDown" ] },
        { "before": [ "C-K" ], "commands": [ "scrollLineUp", "scrollLineUp" ] },
        { "before": [ "<Leader>", "r" ], "after": [ "v", "i", "w", "<Cmd-Alt-F>" ], "commands": [ "editor.action.startFindReplaceAction" ] },
    ],

    // For ZenTabs (which doesn't seem to be working)
    //"workbench.editor.enablePreviewFromQuickOpen": false,
    //"workbench.editor.enablePreview": false,
    "zentabs.maximumOpenedTabs": 8,
    "zentabs.applyLimitFor": "editorGroup",

    // Requires plugin
    "macros": {
        "commentLineAndMoveDown": ["editor.action.commentLine", "cursorDown"],
    },

    // Auto close HTML/JSX tag when typing </
    "auto-close-tag.SublimeText3Mode": true,
}
